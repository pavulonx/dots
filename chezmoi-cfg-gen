#!/bin/bash

template="$(chezmoi source-path)/chezmoi-cfg-tmpl"
chezmoi_cfg_dir="$XDG_CONFIG_HOME/chezmoi"
destination="$chezmoi_cfg_dir/chezmoi.yaml"

if [ "$(find "$chezmoi_cfg_dir" -type f | grep -v '.boltdb$' | wc -l)" -gt 1 ]; then
  echo "Multiple configs files found in '$chezmoi_cfg_dir'. Exiting";
  exit 1;
fi

_render_template() {
  sed '
  s/%%!profile!%%/'"$profile"'/g
  s~%%!browser!%%~'$browser'~g
  s/%%!email!%%/'"$email"'/g
  s/%%!uname!%%/'"$uname"'/g
  s/%%!init!%%/'"$init"'/g
  ' "$template"
}

# PROFILE
[ -z "$def_profile" ] && def_profile="$(chezmoi execute-template '{{.machine_type}}' 2>/dev/null)"
[ -z "$def_profile" ] && [ "$(chezmoi execute-template '{{.chezmoi.os}}' 2>/dev/null)" = 'android' ] && def_profile="phone"
[ -z "$def_profile" ] && [ "$(chezmoi execute-template '{{.chezmoi.osRelease.id}}' 2>/dev/null)" = 'debian' ] && def_profile="server"
[ -z "$def_profile" ] && [ -n "$SSH_CONNECTION" ] && def_profile="server"
[ -z "$def_profile" ] && def_profile="pc"
printf "Profile [pc|server|phone] (default: '$def_profile'): "
read -r profile
[ -z "$profile" ] && profile="$def_profile"
case "$profile" in
  pc|server|phone) :;;
  *) echo "Bad profile: $profile"; exit 1;;
esac


# BROWSER
browsers="$(command -v brave-beta brave firefox-developer-edition firefox chromium links false 2>/dev/null)"
[ -z "$def_browser" ] && def_browser="$(chezmoi execute-template '{{.browser}}' 2>/dev/null)"
[ -z "$def_browser" ] && def_browser="$BROWSER"
[ -z "$def_browser" ] && def_browser="$(echo "$browsers" | head -n1)"
echo "
Available browsers (name or false for none):
$(echo "$browsers" | awk '{print " - " $0}')
"
printf "Select browser (default: '$def_browser'): "
read -r browser
[ -z "$browser" ] && browser="$def_browser"
if command -v "$browser" >/dev/null 2>&1; then
  browser="$(command -v "$browser" 2>/dev/null)"
else
  echo "No such browser: '$browser'"; exit 1;
fi


# USER EMAIL
[ -z "$def_email" ] && def_email="$(chezmoi execute-template '{{.user_email}}' 2>/dev/null)"
[ -z "$def_email" ] && def_email="$(git config --get user.email 2>/dev/null)"
printf "User email (default: '$def_email'): "
read -r email
[ -z "$email" ] && email="$def_email"
[ -z "$email" ] && echo "email cannot be empty!" && exit 1


# USER NAME
[ -z "$def_uname" ] && def_uname="$(chezmoi execute-template '{{.user_fullname}}' 2>/dev/null)"
[ -z "$def_uname" ] && def_uname="$(git config --get user.name 2>/dev/null)"
[ -z "$def_uname" ] && def_uname="$USER"
printf "User fullname (default: '$def_uname'): "
read -r uname
[ -z "$uname" ] && uname="$def_uname"
[ -z "$uname" ] && echo "uname cannot be empty!" && exit 1


# INIT
[ -z "$def_init" ] && test -f /proc/1/comm && def_init="$(cat /proc/1/comm)"
printf "Init system (default: '$def_init'): "
read -r init
[ -z "$init" ] && init="$def_init"


echo "
Selected:
  profile: $profile
  browser: $browser
  email:   $email
  uname:   $uname
  init:    $init
"

tmpf="$(mktemp)"
_render_template > "$tmpf"

if ! diff --color "$destination" "$tmpf"; then
  printf "Apply changes? [y/N]:"; read -r reply;
  case "$reply" in
    y|yes|Y|YES) cp -vf "$tmpf" "$destination";;
    *) echo "No changes have been made";;
  esac
else
  echo "No changes found"
fi
