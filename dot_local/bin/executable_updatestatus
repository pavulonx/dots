#!/bin/sh
# todo add option for use cache and add to polybar
# check pacman -ignore
dir="/tmp/updatestatus"
[ -d "$dir" ] || mkdir -p "$dir"

update_notification_icon="/usr/share/icons/Flatery-Dark/apps/48/system-software-update.svg"
update_notification_icon_local="$HOME/.local/share/icons/Flatery-Dark/apps/48/system-software-update.svg"
if [ -e "$update_notification_icon_local" ]; then update_notification_icon="$update_notification_icon_local"; fi

mainf="$dir/main"
aurf="$dir/aur"
lockf="$dir/lock"

if [ -f '/etc/os-release' ]; then
  os="$(grep '^ID=' /etc/os-release)"; os="${os#ID=}"
else
  os="$(uname -o)"
fi

_debug() {
  $_show_debug && echo "updatestatus:debug:$*"
}

_gen_update_stats() {
  if (set -o noclobber; echo "$$" > "$lockf") 2> /dev/null; then
    trap 'rm -f "$lockf"; exit $?' INT TERM EXIT
    _debug "lock aquired"

case "$os" in
  arch|artix)
    _debug "refreshing main: $mainf"
    checkupdates >"$mainf" 2> /dev/null
    _debug "refreshing aur:  $aurf"
    paru -Qua > "$aurf" 2> /dev/null
    ;;
  debian|ubuntu)
    _debug "refreshing main: $mainf"
    apt list --upgradeable 2>/dev/null | grep -v 'Listing' | awk -F '[/ \\]]' '{ print $1 " " $7 " -> " $3 }' >"$mainf"
    touch "$aurf"
    ;;
#  Android)
#    # TODO: implement
#    ;;
  *)
    echo "Not implemented for os: $os"; exit 1;;
esac

    rm -f "$lockf"
    trap - INT TERM EXIT
    _debug "lock released"
  else
    echo "Failed to acquire $lockf. Held by $(cat "$lockf")" 1>&2
    exit 1
  fi
}

_show_details=false
_show_info_oneline=false
_send_notification=false
_show_debug=false
_refresh=false
for arg; do
    case "$arg" in
        -r) _refresh=true ;;
        -l|-d) _show_details=true ;;
        -o) _show_info_oneline=true ;;
        -v) _show_debug=true ;;
        -n) _send_notification=true ;;
         *) ;;
    esac
done

$_refresh && _gen_update_stats

if test ! -f "$mainf" || test ! -f "$aurf"; then
  echo "Could not find update stats."
  echo "Run '$0 -r' tp refresh stats";
  exit 1;
fi

main_count="$(wc -l < "$mainf")"
aur_count="$(wc -l < "$aurf")"
updates_count=$((main_count + aur_count))

if $_show_details; then
  echo "Updates: $updates_count"
  echo "  Main: $main_count"
  awk '{printf "    - " $0 "\n"}' "$mainf"
  echo "  AUR:  $aur_count"
  awk '{printf "    - " $0 "\n"}' "$aurf"

  if [ -e "/etc/pacman.conf" ]; then
    ignored_pkg="$(grep '^\s*IgnorePkg'   /etc/pacman.conf | cut -d'=' -f2-)"
    if [ -n "$ignored_pkg" ]; then
      echo "  Ignored packages:"
      echo "$ignored_pkg" | tr ' ' '\n' | xargs -r -I {} echo "    - {}"
    fi
    ignored_grp="$(grep '^\s*IgnoreGroup' /etc/pacman.conf | cut -d'=' -f2-)"
    if [ -n "$ignored_grp" ]; then
      echo "  Ignored groups:"
      echo "$ignored_grp" | tr ' ' '\n' | xargs -r -I {} echo "    - {}"
    fi
  fi
elif $_show_info_oneline; then
  echo "updatestatus: package updates: $updates_count (main = $main_count, aur = $aur_count)"
else
  echo "$updates_count"
fi

if $_send_notification && [ "$updates_count" -gt 0 ]; then
  notify-send -t 30000 "System updates available: $updates_count" "Main: \t$main_count \nAUR: \t$aur_count" --icon="$update_notification_icon"
fi
#
# vi: syntax=sh
