#!/bin/sh

# Start xinit with DESKTOP_SESSION environment variable passed to it

# TODO:
#   - check if xinitrc uses DESKTOP_SESSION env variable, warn if not
#   - write help command
#   - use xinit directly without startx
#   - add verbose logging option

# usage: xstart [ SESSION_NAME ]
# SESSION_NAME   name of the session if not set run in interactive mode
# flags: -c confirm -v verbose

XSTART_X11_CONFIG_DIR="${XSTART_X11_CONFIG_DIR:-"$XDG_CONFIG_HOME/x11"}"
XSTART_ENABLED_SESSIONS="${XSTART_ENABLED_SESSIONS:-"i3 xmonad bspwm dwm awesome xfce"}"
XSTART_LOGS_DIR="${XSTART_LOGS_DIR:-"$XDG_CACHE_HOME/xsessionlogs"}"
XSTART_LOGS_HISTORY="${XSTART_LOGS_HISTORY:-5}"
XSTART_EXEC_DIR="${XSTART_EXEC_DIR:-$HOME}"

xpids="$(pgrep xinit 2>/dev/null)"
if [ -n "$xpids" ]; then
  cat <<-EOF >&2
WARNING! Xorg is probably running with pid(s):
$xpids
Press Return to coniunue
EOF
  read -r
fi


resolve_xinitrc() {
  _xinitrc_path=""
  _session="$1"
  _dir="$XSTART_X11_CONFIG_DIR"
  [ -d "$_dir" ] || _dir="$HOME";
  [ -f "/etc/X11/xinit/xinitrc" ] && _xinitrc_path="/etc/X11/xinit/xinitrc"
  [ -f "$HOME/.xinitrc" ] && _xinitrc_path="$HOME/.xinitrc"
  [ -f "$_dir/xinitrc" ] && _xinitrc_path="$_dir/xinitrc"
  [ -f "$_dir/.xinitrc-$_session" ] && _xinitrc_path="$_dir/.xinitrc-$_session"
  [ -f "$_dir/xinitrc-$_session" ] && _xinitrc_path="$_dir/xinitrc-$_session"
  # shellcheck disable=SC2153
  [ -f "$XINITRC" ] && _xinitrc_path="$XINITRC"
  realpath "$_xinitrc_path"
  unset _xinitrc_path _dir _session
}


#### MAIN

# parse cmdline args
_choice="$1"


# resolving available sessions
# shellcheck disable=SC2086
available_sessions="$(command -v $XSTART_ENABLED_SESSIONS 2> /dev/null | xargs -I {} basename {})"
if [ -z "$available_sessions" ]; then
  cat <<EOF >&2
No available session found!
Install one or set XSTART_ENABLED_SESSIONS variable
XSTART_ENABLED_SESSIONS='$XSTART_ENABLED_SESSIONS'
EOF
  exit 1
fi


# interactive choose session if session not set
if [ -z "$_choice" ]; then
  trap 'exit 0' INT
  echo "Available sessions:"
  echo "$available_sessions" | awk '{print "  " NR ") " $0}'
  printf "Select name or number (defaut 1): "
  read -r _choice </dev/tty
  _choice="${_choice:-1}"
  if test "$_choice" -gt 0 2>/dev/null; then
    _choice="$(echo "$available_sessions" | awk "NR == $_choice")"
  fi
  trap - INT
fi


# check if choosen session is available
xsession="$(echo "$available_sessions" | grep -Eo "^$_choice$")"
if [ -z "$xsession" ] || [ "$(echo "$xsession" | wc -l)" -ne 1 ]; then
  echo "Bad session!"
  exit 1
fi


# resolve xinitrc
xinitrc="$(resolve_xinitrc "$xsession")"
[ -z "$xinitrc" ] && echo "Could not resolve xinitrc config" >&2 && exit 2

# prepare logging
mkdir -p "$XSTART_LOGS_DIR"
log_file="$XSTART_LOGS_DIR/$(date +'%F_%H-%M-%S').$xsession.log"
ln -sf "$log_file" "$XSTART_LOGS_DIR/latest.log"
[ "$XSTART_LOGS_HISTORY" -gt 0 ] && # keep XSTART_LOGS_HISTORY logs in XSTART_LOGS_DIR
  find "$XSTART_LOGS_DIR" -type f -name '*.log' -printf "%T@:%p\n" |
  sort -nr | tail -n "+$XSTART_LOGS_HISTORY" | cut -d: -f2- |
  xargs -r rm


# start X with given session
echo "Starting session: $xsession" | tee -a "$log_file"
echo "Using xinitrc init script: '$xinitrc'" >>"$log_file"
cd "$XSTART_EXEC_DIR" || exit 2


server="/usr/bin/X"
[ -f "/etc/X11/xinit/xserverrc" ] && server="/etc/X11/xinit/xserverrc"
[ -f "$HOME/.xserverrc" ] && server="$HOME/.xserverrc"

if [ -z "$XAUTHORITY" ]; then
  XAUTHORITY="${XDG_RUNTIME_DIR:-$HOME}/.Xauthority"
  export XAUTHORITY
fi

# determine display
d=0
while [ -e "/tmp/.X$d-lock" ] || [ -S "/tmp/.X11-unix/X$d" ]; do
  d=$((d + 1))
done
display=":$d"
unset d

# datermine tty
tty=$(tty)
tty_num="${tty#/dev/tty}"
if ! [ "$tty_num" -ge 0 ] >/dev/null 2>&1; then
  echo "TTY '$tty' is invalid" >&2
  exit 1
fi

# get cookie
mcookie="$(/usr/bin/mcookie)"
if [ -z "$mcookie" ]; then
  echo "Couldn't create cookie" >&2
  exit 1
fi

cleanup() {
  rc=$?
  echo "cleanup invoked: '$rc' | '$$'" >> /home/jr/xstartlog
  xauth remove "$display"
  command -v deallocvt > /dev/null 2>&1 && deallocvt
  exit $rc
}

trap 'cleanup' EXIT HUP TERM EXIT INT QUIT
xauth add "$display" MIT-MAGIC-COOKIE-1 "$mcookie"

# shellcheck disable=SC2086
DESKTOP_SESSION="$xsession" \
  exec xinit "$xinitrc" -- "$server" "$display" "vt$tty_num" -keeptty -auth "$XAUTHORITY" 2>&1 |
  ts '[%Y-%m-%d %H:%M:%S]' >>"$log_file" 2>&1
