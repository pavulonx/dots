#!/bin/sh

set -e

_fail() {
  echo "$1" >&2
  exit 1
}

_help() {
  cat <<EOF
Usage: $0 <COMMAND> [CRYPT]

Manages encrypted device CRYPT defined in CRYPT_CONFIG

Available COMMANDs:
  m|mount     CRYPT    - mounts CRYPT
  o|open      CRYPT    - mounts and opens CRYPT
  u|umount    CRYPT    - umounts CRYPT
  c|close     CRYPT    - umounts and closes CRYPT
  s|status    CRYPT    - show info about CRYPT
  ls|list              - lists available crypts in CRYPT_CONFIG
  cfg|config           - print parsed contents of CRYPT_CONFIG
  h|help               - print help info

Environment vairables:
  CRYPT_CONFIG    - path to crypt config (set to '$CRYPT_CONFIG')
EOF
}

[ "$(id -u)" -eq 0 ] && _fail "Must not be executed with superuser priviledges!"

SUDO="${SUDO:-sudo}"
CWD="$PWD"
CRYPT_CONFIG=${CRYPT_CONFIG:-"$XDG_CONFIG_HOME/crypt/crypt.conf"}
[ -z "$CRYPT_CONFIG" ] && _fail "CRYPT_CONFIG is not set!"
! [ -f "$CRYPT_CONFIG" ] && _fail "CRYPT_CONFIG file: '$CRYPT_CONFIG' not found"


#
# COMMANDS
#
_mount() {
  [ ! "$(find "$CRYPT_MOUNTPOINT" | wc -l)" = 1 ] && _fail "Mount directory '$CRYPT_MOUNTPOINT' is not empty!"
  "$SUDO" mount "$CRYPT_MAPPER_PATH" "$CRYPT_MOUNTPOINT" ||
    _fail "Unable to mount '$CRYPT_NAME' at '$CRYPT_MOUNTPOINT'";
}

_open() {
  if [ -z "$CRYPT_KEY" ]; then
    "$SUDO" cryptsetup open "$CRYPT_REAL_PATH" "$CRYPT_NAME" ||
      _fail "Unable to open '$CRYPT_NAME'"
  else
    "$SUDO" cryptsetup open --key-file="$CRYPT_KEY" "$CRYPT_REAL_PATH" "$CRYPT_NAME" ||
      _fail "Unable to open '$CRYPT_NAME'"
  fi
  _mount
}

_umount() {
  if echo "$CWD" | grep -q "$CRYPT_MOUNTPOINT"; then
    cd ~ || exit 1
  fi
  "$SUDO" umount "$CRYPT_MAPPER_PATH" ||
    _fail "Unable to umount '$CRYPT_NAME' of '$CRYPT_MAPPER_PATH'"
}

_close() {
  _umount
  "$SUDO" cryptsetup close "$CRYPT_NAME" ||
    _fail "Unable to close '$CRYPT_NAME'"
}

_status() {
  if grep -qs "$CRYPT_MAPPER_PATH " /proc/mounts; then
    "$SUDO" cryptsetup status "$CRYPT_NAME"
  else
    echo "$CRYPT_NAME is locked"
  fi
  if grep -qs "$CRYPT_MOUNTPOINT " /proc/mounts; then
    echo
    echo "Mount: "
    grep "$CRYPT_MOUNTPOINT " /proc/mounts
    [ -b "$CRYPT_MAPPER_PATH" ] && lsblk "$CRYPT_MAPPER_PATH"
  else
    echo "$CRYPT_NAME is not mounted"
  fi
  echo
}

_get_crypts() {
  mounts="$(mktemp -p /tmp mounts-XXXXXX)"
  awk '{print $2":"$3}' /proc/mounts | sort -t: -k1,1 >"$mounts"
  #awk '/[[:blank:]*][^#].*/  { if (NF == 3) { printf "%s:%s:%s\n", $1, $2, $3 } }' "$CRYPT_CONFIG" | sort -u -t: -k3,3 |
  awk '!/^[[:blank:]]*#.*/  { if (NF == 3 || NF == 4) { printf "%s:%s:%s:%s\n", $1, $2, $3, $4} }' "$CRYPT_CONFIG" | sort -u -t: -k3,3 |
    join -t: -1 1 -2 3 -a 2 -e '-' -o 2.1,2.2,2.3,2.4,1.2 "$mounts" - |
    sort -u -t':' -k1,1
  rm -f "$mounts"
}

_list() {
  _get_crypts | column -t -s: --table-columns 'NAME,CRYPT PATH,MOUNTPOINT,KEY,MOUNTED'
}

_parse() {
  [ -z "$_crypt_name" ] && _fail "Specify crypt name name to use" true
  _crypt_settings="$(_get_crypts | grep -E "^$_crypt_name:")"
  [ -z "$_crypt_settings" ] && _fail "Crypt '$_crypt_name' not found!" true

  # CONFIGURATION:
  CRYPT_NAME="$(echo "$_crypt_settings" | cut -d: -f1)"
  CRYPT_MAPPER_PATH="/dev/mapper/$CRYPT_NAME"

  CRYPT_PATH="$(echo "$_crypt_settings" | cut -d: -f2)"
  CRYPT_REAL_PATH="$(realpath -e "$CRYPT_PATH")"

  CRYPT_MOUNTPOINT="$(echo "$_crypt_settings" | cut -d: -f3)"
  [ ! -d "$CRYPT_MOUNTPOINT" ] && _fail "Mount directory '$CRYPT_MOUNTPOINT' not found!"

  CRYPT_KEY="$(echo "$_crypt_settings" | cut -d: -f4)"
  case "$CRYPT_KEY" in
    -|input|tty|'') CRYPT_KEY='' ;;
     *) ;;
  esac
  [ -n "$CRYPT_KEY" ] && [ ! -f "$CRYPT_KEY" ] && _fail "Key file '$CRYPT_KEY' does not exist!"


  echo "'$CRYPT_NAME' configuration:"
  cat <<EOF
  CRYPT_NAME          $CRYPT_NAME
  CRYPT_PATH          $CRYPT_PATH
  CRYPT_MOUNTPOINT    $CRYPT_MOUNTPOINT
  CRYPT_KEY           $CRYPT_KEY
  CRYPT_REAL_PATH     $CRYPT_REAL_PATH
  CRYPT_MAPPER_PATH   $CRYPT_MAPPER_PATH
EOF
  echo ""
}

_edit() {
  eval "$EDITOR" "$CRYPT_CONFIG"
}

_cmd="$1"
_crypt_name="$2"

case $_cmd in
  u|umount)
    _parse
    _umount
    ;;
  m|mount)
    _parse
    _mount
    ;;
  o|open)
    _parse
    _open
    ;;
  c|close)
    _parse
    _close
    ;;
  s|status)
    _parse
    _status
    ;;
  cfg|config)
    _get_crypts
    exit 0
    ;;
  ls|list)
    _list
    ;;
  e|edit)
    _edit
    ;;
  ''|h|help)
    _help
    ;;
  *)
    _fail "Unrecognized command: '$_cmd'. Run '$0 help' to print help message"
    exit 1
    ;;
esac
