# shellcheck shell=sh
# shellcheck disable=SC2155

# terminal programs settings
export FZF_DEFAULT_OPTS="--layout=reverse --height 60%"
## ls cfg
export LSCOLORS="Gxfxcxdxbxegedabagacad"
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';
export TIME_STYLE='long-iso' # date format in ls
## less cfg (is also applicable to bat)
export LESS='-riF'
export LESS_TERMCAP_mb=$(printf '\e[4;32m')
export LESS_TERMCAP_md=$(printf '\e[1;31m')
export LESS_TERMCAP_me=$(printf '\e[0m')
export LESS_TERMCAP_so=$(printf '\e[1;30;47m')
export LESS_TERMCAP_se=$(printf '\e[0m')
export LESS_TERMCAP_us=$(printf '\e[1;36m')
export LESS_TERMCAP_ue=$(printf '\e[0m')
export LESSOPEN='| /usr/bin/highlight -O ansi %s 2>/dev/null'

# files
alias \
        zshconf='$EDITOR $ZDOTDIR/.zshrc' \
        i3conf='$EDITOR ~/.config/i3/config' \
        xmconf='$EDITOR ~/.config/xmonad/xmonad.hs' \
        vconf='$EDITOR ~/.config/nvim/init.vim' \
        de='dotedit';

# system
alias \
        ka='killall' \
        xlogs='cat $XDG_CACHE_HOME/xsessionlogs/current.log'
        sys='systemctl' \
        ssys='sudo systemctl';

# package manager
{{- if eq .chezmoi.os "linux" }}
  {{- if eq .chezmoi.osRelease.id "debian" }}
alias update='sudo apt-get update && sudo apt-get upgrade';
fpkg() { apt-cache pkgnames | sort -u | fzf --multi --preview 'apt-cache show {1}'; }
  {{- else }}{{/* by default use pacman */}}
alias update='paru -Syu --upgrademenu';
fpkg() { paru -Sl --color=always | fzf --ansi --multi --preview 'paru -Si {2}' | awk '{print $2}'; }
alias pac='sudo pacman' pacmanclean='sudo pacman -R `pacman -Qdtq`';
  {{- end }}
{{- else if eq .chezmoi.os "android" }}{{/* by default use pacman */}}
alias update='pkg upgrade';
fpkg() { pkg list-all | fzf --multi --preview-window down --preview 'pkg show {1}' | awk '{print $1}'; }
{{- end}}


# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim='nvim' vimdiff='nvim -d';

alias \
        cp='cp -iv' \
        mv='mv -iv' \
        rm='rm -vI' \
        md='mkdir -pv' \
        diff='diff --color=auto' \
        grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}' \
        h='fc -li 1' \
        :q='exit';

# abbreviations
alias \
        o='xdg-open' \
        v='$EDITOR' \
        chm='chezmoi' \
        shck='shellcheck' \
        yt='youtube-dl --add-metadata -i' \
        yta='yt -x -f bestaudio/best';

# ls
alias \
        exa='exa --color=auto --group-directories-first' \
        ls='exa' \
        l='exa -la' \
        ll='exa -l' \
        lt='exa -lasnew' \
        lg='exa --git -l -snew';

# dirs
alias \
        d='dirs -v | head -10' \
        cd..='cd ..' \
        -='cd -' \
        1='cd -'  2='cd -2' 3='cd -3' \
        4='cd -4' 5='cd -5' 6='cd -6' \
        7='cd -7' 8='cd -8' 9='cd -9';

# docker
alias \
        dr=docker \
        drps='docker ps' \
        drk='docker kill' \
        drb='docker build' \
        dre='docker exec' \
        drei='docker exec -it' \
        drri='docker run -it --rm' \
        drri.='docker run -it --rm --workdir=/ctx --volume "$PWD:/ctx"' \
        drc='docker-compose' \
        drip='docker inspect -f {{`"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}`}}"'; {{- /*`# chezmoi template escaping`*/}}

# git
alias \
        g='git' \
        ga='git add' \
        gaf='git_add_fzf' \
        gb='git branch' \
        \
        gd='git diff' \
        gdo='git diff origin/"$(git_current_branch)"' \
        gdca='git diff --cached' \
        gdcao='git diff --cached origin/"$(git_current_branch)"' \
        \
        gc='git commit -v' \
        gc!='git commit -v --amend' \
        gcmsg='git commit -m' \
        \
        gco='git checkout' \
        gcob='git checkout -b' \
        \
        gcp='git cherry-pick' \
        gcpa='git cherry-pick --abort' \
        gcpc='git cherry-pick --continue' \
        \
        gf='git fetch' \
        gfprune='git fetch --all --prune' \
        \
        gl='git pull'\
        glo='git pull origin "$(git_current_branch)"' \
        \
        gm='git merge' \
        gmt='git mergetool' \
        \
        gp='git push' \
        gpcb='git push origin "$(git_current_branch)"' \
        gpcb!='git push --force-with-lease origin "$(git_current_branch)"' \
        \
        gr='git remote' \
        grv='git remote  -v' \
        \
        grb='git rebase' \
        grba='git rebase --abort' \
        grbc='git rebase --continue' \
        \
        gpristine='git reset --hard && git clean -dffx' \
        \
        gst='git status' \
        gsts='git status -sb' \
        gstf='git_status_fzf' \
        \
        gsta='git stash' \
        gstaf='git_stash_fzf' \
        gstaa='git stash apply' \
        gstas='git stash show --text' \
        gstal='git stash list' \
        gstad='git stash drop' \
        gstap='git stash pop' \
        \
        glog='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"' \
        glogs='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --stat' \
        glogf='git_log_tree_fzf' \
        \
        gsetup='git branch --set-upstream-to=origin/$(git_current_branch)' \
        gcfg='git config' \
        gitroot='git rev-parse --show-toplevel' \
        cdgr='cd $(gitroot)';

git_current_branch() {
  # Outputs the name of the current branch Usage example: git pull origin $(git_current_branch)
  # Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if it's not a symbolic ref, but in a Git repo.
  ref="$(git symbolic-ref --quiet HEAD 2> /dev/null)";
  ret="$?";
  if [ "$ret" -ne 0 ]; then
    [ "$ret" -eq 128 ] && return;  # no git repo.
    ref="$(git rev-parse --short HEAD 2> /dev/null)" || return;
  fi
  echo "${ref#refs/heads/}";
}

gcmsgt() {
  ticket_default="${GIT_MSG_TICKET_DEFAULT:-}"
  ticket_sep="${GIT_MSG_TICKET_SEP:-" "}"
  if echo "$1" | grep -q '[A-Z]+-[0-9]+'; then
    message="$1";
  else
    ticket="$(git_current_branch | grep -Eo '[A-Z]+-[0-9]+' || echo "$ticket_default")";
    [ -n "$ticket" ] && ticket="${ticket}${ticket_sep}"
    message="${ticket}${1}"
  fi
  git commit -m "$message"
}


# sbt
alias \
        sbt_init_src='sbt "compile;updateClassifiers;updateSbtClassifiers;"';

# clipboard
{{ if eq .chezmoi.os "android" -}}
clip() { termux-clipboard-set "${1:-/dev/stdin}"; }
clipp() { termux-clipboard-get; }
{{ else -}}
clip() { xclip -in -selection clipboard < "${1:-/dev/stdin}"; }
clipp() { xclip -out -selection clipboard; }
{{- end }}

# view or edit command
vcmd() {
  [ -z "$1" ] && echo "Usage: vcmd <command>" && return 1;
  command -V "$1" || return 1;
  _vx_cmd="$(command -v "$1")";
  if [ "$_vx_cmd" = "$1" ]; then # builtin function
    which "$_vx_cmd" | cat | bat --language=sh --style=grid,numbers --color=always
  elif [ -x "$_vx_cmd" ]; then
    file "$_vx_cmd"
    if file "$_vx_cmd" | grep -Eq ".*shell\ script.*executable.*"; then
      bat --color=always "$_vx_cmd"
      echo "Press Enter to edit, CTRL+C to abort"
      read -r </dev/stdin
      "$EDITOR" "$_vx_cmd"
    fi
  fi
  unset _vx_cmd
}

ssha() {
  test -z "$SSH_AUTH_SOCK" && echo "SSH_AUTH_SOCK is not set" && return 1;
  test -e "$SSH_AUTH_SOCK" && echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK already exists. Is agent running?" && return 2;
  eval "$(ssh-agent -a "$SSH_AUTH_SOCK")";
}

# archives
ex() {
  if [ -f "$1" ] ; then
    case "$1" in
    *.tar)       tar xf "$1"      ;;
    *.tar.xz)    tar xf "$1"      ;;
    *.tar.bz2)   tar xjf "$1"     ;;
    *.tbz2)      tar xjf "$1"     ;;
    *.tar.gz)    tar xzf "$1"     ;;
    *.tgz)       tar xzf "$1"     ;;
    *.tar.zst)   unzstd "$1"      ;;
    *.bz2)       bunzip2 "$1"     ;;
    *.gz)        gunzip "$1"      ;;
    *.rar)       unrar x "$1"     ;;
    *.zip)       unzip "$1"       ;;
    *.7z)        7z x "$1"        ;;
    *.deb)       ar x "$1"         ;;
    *)           [ -z "$1" ] && printf "Usage:\n\t%s [path-to-archive]\n" "$0" ||
                                echo "$1 cannot be extracted via ex" ;;
    esac
  else
    echo "$1 is not a valid file";
  fi
}

# vi:syntax=sh
