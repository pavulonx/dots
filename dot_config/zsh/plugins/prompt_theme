# vim:ft=zsh ts=2 sw=2 sts=2

setopt prompt_subst

# prompt settings
_prompt_start=$(${SALT_BOLD_PROMPT:-false} && echo "%S %s" || echo "")
_show_date=${SALT_SHOW_DATE:-false}
_show_time=${SALT_SHOW_TIME:-true}
_show_vi=${SALT_SHOW_VI:-true}
_show_venv=${SALT_SHOW_VENV:-true}
_show_git=${SALT_SHOW_GIT:-true}
_show_user=${SALT_SHOW_USER:-true}

#disable default venv prompt
"$_show_venv" && export VIRTUAL_ENV_DISABLE_PROMPT=true

VICMD_INDICATOR="NORMAL"
VIINS_INDICATOR="INSERT"
#VICMD_INDICATOR="N"
#VIINS_INDICATOR="I"
prompt_vi_mode() {
  "$_show_vi" || return;
  local mode
  is_normal() {
    test -n "${${KEYMAP/vicmd/$VICMD_INDICATOR}/(main|viins)/}"  # param expans
  }
  if is_normal; then
    print -n "%S $VICMD_INDICATOR %s"
  else
    print -n " $VIINS_INDICATOR "
  fi
}

prompt_context() {
  local ctx
  if [ -n "$SSH_CLIENT" ]; then
    ctx="%{%F{magenta}%} %n@%m %{%f%}"
  else
    $_show_user && ctx=" %n "
  fi
  # if root red{user@host} else on remote magenta{user@host}, on local - {user}
  print -n "%(!.%{%F{white}%K{red}%} %n@%m %{%k%}%{%f%}.${ctx:-})"
}

prompt_virtualenv() {
  "$_show_venv" || return;
  local virtualenv_path="$VIRTUAL_ENV"
  if [[ -n $virtualenv_path ]]; then
    print -n "%{%F{blue}%}  $(basename "$virtualenv_path") %{%f%}"
  fi
}

ICOBRANCH="\uf126"
ICODETACHED="➦"
#ICOREMOTETRACK="☊"
ICOREMOTE="\uf0c1"
#ICOTAG="\uf02b"
#ICOTAG="\uf024"
ICOTAG="\u2691"
ICOSTASH="\u2699 "
ICOWORKTREE="*"
ICOUNTRACK="?"
prompt_git() {
  "$_show_git" || return;
  # if not inside git repo do nothing
  [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" != "true" ] && return;
  local git_dir; git_dir=$(git rev-parse --git-dir 2>/dev/null)

  # status
  gst_porcelain=$(git status --porcelain=v2 --branch --ignore-submodules="${GIT_STATUS_IGNORE_SUBMODULES:-dirty}" 2> /dev/null)
  read -r oid head upstream ab <<< "$(echo "$gst_porcelain" | grep "^# branch." | cut -d' ' -f3- | xargs)"
  gst_files=$(\grep -v "^# " <<< "${gst_porcelain}")

  ### FILES STATUS - green - clean, yellow - all staged, red - unstaged changes or untracked files
  local g_base_color; g_base_color="green"
  local c_staged;       c_staged=$(grep -c "^[12]\ [^.]." <<< "${gst_files}");
  local c_worktree;   c_worktree=$(grep -c "^[12]\ .[^.]" <<< "${gst_files}");
  local c_untracked; c_untracked=$(grep -c "^?\ " <<< "${gst_files}");
  local c_unmerged;   c_unmerged=$(grep -c "^u\ " <<< "${gst_files}");
  stat_txt=""
  if [ "$c_staged" -gt 0 ];     then stat_txt="$stat_txt [$c_staged]";              g_base_color='yellow';  fi
  if [ "$c_worktree" -gt 0 ];   then stat_txt="$stat_txt $c_worktree$ICOWORKTREE";  g_base_color='red';     fi
  if [ "$c_untracked" -gt 0 ];  then stat_txt="$stat_txt $c_untracked$ICOUNTRACK";  g_base_color='red';     fi
  if [ "$c_unmerged" -gt 0 ];   then stat_txt="$stat_txt >$c_unmerged<";            g_base_color='red';     fi
  [ -n "$stat_txt" ] && stat_txt="|$stat_txt"

  ### REF
  local ref_txt; ref_txt="";
  if [ "$head" = "(detached)" ]; then
    ref_txt="$ICODETACHED ${oid:0:7} ";
  else
    ref_txt="$ICOBRANCH $head ";
  fi

  ### UPSTREAM
  local upstream_txt; upstream_txt=""
  if [ -n "$upstream" ]; then
    upstream_txt="$upstream"
    [ "${upstream##*/}" = "$head" ] && upstream_txt="${upstream%%/*}"
    upstream_txt="$ICOREMOTE $upstream_txt "

    local commits_ahead commits_behind
    commits_ahead=0; _tmp_commits_ahead="${ab%% *}"; commits_ahead="${_tmp_commits_ahead##+}"
    commits_behind="${ab##* -}"
    [ "$commits_ahead" -gt 0 ]  && upstream_txt="$upstream_txt%f%F{cyan}↑$commits_ahead%f%F{$g_base_color} "
    [ "$commits_behind" -gt 0 ] && upstream_txt="$upstream_txt%f%F{red}↓$commits_behind%f%F{$g_base_color} "
  fi

  ### TAGS TODO: use `git tag --points-at=HEAD` ?
  local tag_txt; tag_txt=""
  tag_at_current_commit=$(git describe --exact-match --tags "$oid" 2> /dev/null)
  if [ -n "$tag_at_current_commit" ]; then
    tag_txt="$ICOTAG $tag_at_current_commit ";
  fi

  ### STASH
  local stash_txt; stash_txt=""
  number_of_stashes="$(wc -l "$git_dir/logs/refs/stash" 2> /dev/null)" #probably faster
  number_of_stashes="${number_of_stashes%% *}"
  #number_of_stashes="$(git stash list 2> /dev/null | wc -l)"
  [ "$number_of_stashes" -gt 0 ] && stash_txt="$ICOSTASH${number_of_stashes} ";

  ### MODE - multiple motes are possible (you can rebase while bisecting)
  local mode_txt; mode_txt=""
  [ -e "${git_dir}/BISECT_LOG" ] && mode_txt="$mode<B> ";
  [ -e "${git_dir}/MERGE_HEAD" ] && mode_txt="$mode>M< ";
  [ -e "${git_dir}/CHERRY_PICK_HEAD" ] && mode_txt="$mode<CP< ";
  [[ -e "${git_dir}/rebase" || -e "${git_dir}/rebase-apply" || -e "${git_dir}/rebase-merge" || -e "${git_dir}/../.dotest" ]] && mode_txt="$mode>R> ";

  ### GIT PROMPT # TODO: handle spaces after segments here
  g_prompt_txt="${upstream_txt}${ref_txt}${mode_txt}${tag_txt}${stash_txt}${stat_txt}"
  print -n "%F{$g_base_color} $g_prompt_txt %f"
}

prompt_dir() {
  print -n " %~ "
}

prompt_date() {
  "$_show_date" || return;
  print -n " %D{%Y-%m-%d} "
}

prompt_time() {
  "$_show_time" || return;
  print -n " %D{%H:%M} "
}

SYMBOL_ERR="\u2718"
SYMBOL_JOB="\u2699"
prompt_status() {
  err_prompt="%0(?..%{%F{red}%} $SYMBOL_ERR %? %f)"
  jobs_prompt="%1(j.%{%F{cyan}%} $SYMBOL_JOB %j %f.)"
  print -n "$err_prompt$jobs_prompt"
}

SYMBOL_CMD=" $ "
SYMBOL_CMD_SU="%{%F{red}%} # %{%f%}"
prompt_cmd() {
  print -n "%(!.$SYMBOL_CMD_SU.$SYMBOL_CMD)"
}

## Main prompt
build_prompt() {
  print -n "\n$_prompt_start"
  prompt_status
  prompt_context
  prompt_dir
  prompt_virtualenv
  prompt_git
  print -n "\n$_prompt_start"
  prompt_cmd
}

build_rprompt() {
  prompt_vi_mode
  prompt_date
  prompt_time
}

# shellcheck disable=SC2016,SC2034
PROMPT='%B$(build_prompt)%b'
# shellcheck disable=SC2016,SC2034
RPROMPT='%B$(build_rprompt)%b'
